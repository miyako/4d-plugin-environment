/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Environment.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Environment
 #	author : miyako
 #	2020/06/25
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Environment.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
			// --- Environment
            
            case 1 :
                Expand_environment_string(params);
                break;
            case 2 :
                Get_environment_variable(params);
                break;
            case 3 :
                PUT_ENVIRONMENT_VARIABLE(params);
                break;
            case 4 :
                REGISTER_ENVIRONMENT_WINDOW(params);
                break;
        }
	}
	catch(...)
	{

	}
}

#pragma mark -

static void Expand_environment_string(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    
    C_TEXT Param1;
    C_TEXT returnValue;

#if VERSIONWIN

    /*
     https://docs.microsoft.com/en-us/windows/win32/api/processenv/nf-processenv-expandenvironmentstringsw
     */
    
    PackagePtr pParams = (PackagePtr)params->fParameters;
    Param1.fromParamAtIndex(pParams, 1);
    
    DWORD len = ExpandEnvironmentStringsW((LPCWSTR)Param1.getUTF16StringPtr(), NULL, 0);
    std::vector<wchar_t>buf(++len);//The size of the lpSrc and lpDst buffers is limited to 32K
    len = ExpandEnvironmentStringsW((LPCWSTR)Param1.getUTF16StringPtr(), &buf[0], buf.size());
    if(len) {
        returnValue.setUTF16String((const PA_Unichar *)&buf[0], len);
    }
    
#endif
    
    returnValue.setReturn(pResult);
}

static void Get_environment_variable(PA_PluginParameters params) {

    sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
    PackagePtr pParams = (PackagePtr)params->fParameters;
 
    C_TEXT Param1;
    C_TEXT returnValue;
 
    Param1.fromParamAtIndex(pParams, 1);
    
    if(Param1.getUTF16Length()) {
    
#if VERSIONWIN
    
    std::lock_guard<std::mutex> guard(gMutexEnvironment);
    
    size_t len = 0;
    wchar_t* buf = 0;

    if(_wdupenv_s(&buf, &len, (const wchar_t *)Param1.getUTF16StringPtr()) == 0) {
        if(buf) {
            returnValue.setUTF16String((const PA_Unichar *)buf, (uint32_t)len);
            free(buf);
        }
    }
    
#else
    
    CUTF8String name, value;
    Param1.copyUTF8String(&name);
    
    const char *s = getenv((const char *)name.c_str());
    if(s) {
        value = CUTF8String((const uint8_t *)s, strlen(s));
    }
                                               
    returnValue.setUTF8String(&value);
    
#endif
        
    }
    
    returnValue.setReturn(pResult);
}

static void PUT_ENVIRONMENT_VARIABLE(PA_PluginParameters params) {

    PackagePtr pParams = (PackagePtr)params->fParameters;
    
    C_TEXT Param1;
    C_TEXT Param2;

    Param1.fromParamAtIndex(pParams, 1);
    Param2.fromParamAtIndex(pParams, 2);
    
    if(Param1.getUTF16Length()) {
        
#if VERSIONWIN
    
    std::lock_guard<std::mutex> guard(gMutexEnvironment);

    _wputenv_s((const wchar_t *)Param1.getUTF16StringPtr(), (const wchar_t *)Param2.getUTF16StringPtr());
    
#else
    
    CUTF8String name, value;
    Param1.copyUTF8String(&name);
    Param2.copyUTF8String(&value);
    
    setenv((const char *)name.c_str(), (const char *)value.c_str(), 1);
    
#endif
        
    }
}

static void REGISTER_ENVIRONMENT_WINDOW(PA_PluginParameters params) {

}
